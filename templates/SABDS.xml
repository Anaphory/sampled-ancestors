<beast version='2.0'
       namespace='beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'>

    <!-- tree priors -->
    <mergewith point='treePriorTemplates'>

    <subtemplate id='SampledAncestorBirthDeathSamplingModel' class='beast.evolution.speciation.SABDSamplingThroughTimeModel' mainid='BirthDeathSampling.t:$(n)'
                     suppressInputs='beast.evolution.speciation.SABDSamplingThroughTimeModel.birthRate,
    	beast.evolution.speciation.SABDSamplingThroughTimeModel.deathRate,
	beast.evolution.speciation.SABDSamplingThroughTimeModel.samplingRate,
	beast.evolution.speciation.SABDSamplingThroughTimeModel.becomeNoninfectiousAfterSamplingProbability,
	beast.evolution.speciation.SABDSamplingThroughTimeModel.tree,
	beast.evolution.speciation.SABDSamplingThroughTimeModel.treeIntervals,
	beast.math.distributions.MarkovChainDistribution.parameter
	'>
            <![CDATA[
<!-- Sampled Ancestor Birth Death Sampling model-->
    <BirthDeathSamplingModel spec="SABDSamplingThroughTimeModel" id="BirthDeathSampling.t:$(n)" tree="@Tree.t:$(n)">
		<parameter name="orig_root" id="orig_root.t:$(n)" value ="1.0" lower="0." upper="1000."/>
        <parameter name="birthRate" id="birthRate.t:$(n)" value ="1.5" lower ="0." upper="100"/>
        <parameter name="deathRate" id="deathRate.t:$(n)" value ="0.2" lower="0." upper="10"/>
        <parameter name="samplingRate" id="samplingRate.t:$(n)" value="0.5" lower="0." upper="10"/>
        <parameter name="becomeNoninfectiousAfterSamplingProbability" id="r.t:$(n)" value="0.5" lower="0." upper="1."/>
	</BirthDeathSamplingModel>


	<distribution  id='orig_rootPrior.t:$(n)' x="@orig_root.t:$(n)" spec='beast.math.distributions.Prior'>
		<distr spec='beast.math.distributions.Uniform' lower="0." upper="1000."/>
	</distribution>
	<distribution id="birthRatePrior.t:$(n)" spec="beast.math.distributions.Prior" x="@birthRate.t:$(n)">
		<distr spec='beast.math.distributions.LogNormalDistributionModel' M="0." S="1." offset="0.0" meanInRealSpace="false"/>
	</distribution>
	<distribution id="deathRatePrior.t:$(n)" spec="beast.math.distributions.Prior" x="@deathRate.t:$(n)">
		<distr spec='beast.math.distributions.LogNormalDistributionModel' M="0." S="0.5" offset="0.0" meanInRealSpace="false"/>
	</distribution>
	<distribution id="samplingRatePrior.t:$(n)" spec="beast.math.distributions.Prior" x="@samplingRate.t:$(n)">
		<distr spec='beast.math.distributions.LogNormalDistributionModel' M="0." S="0.5" offset="0.0" meanInRealSpace="false"/>
	</distribution>
	<distribution id="rPrior.t:$(n)" spec="beast.math.distributions.Prior" x="@r.t:$(n)">
        <distr spec='beast.math.distributions.DegenerateBeta' alpha = "1.0" beta = "1.0"/>
	</distribution>

	<operator id='orig_rootScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="3" parameter="@orig_root.t:$(n)"/>
    <operator id='birthScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@birthRate.t:$(n)"/>
    <operator id='deathScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@deathRate.t:$(n)"/>
	<operator id='samplingScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@samplingRate.t:$(n)"/>
    <operator id='rScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".9" weight="1" parameter="@r.t:$(n)"/>
    <operator id='rJumpOperator.t:$(n)' spec='JumpToPoint' weight = "1" becomeNoninfectiousAfterSamplingProbability="@r.t:$(n)" tree = "@Tree.t:$(n)"/>

    <plugin id='SACount.t:$(n)' spec='beast.evolution.tree.SALogger' tree='@Tree.t:$(n)'/>

]]>
            <connect srcID='BirthDeathSampling.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(BirthDeathSampling.t:$(n)) and inlikelihood(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>

            <connect srcID='orig_rootPrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(BirthDeathSampling.t:$(n)) and orig_root.t:$(n)/estimate=true'>prior on orig_root.t:$(n)</connect>
            <connect srcID='birthRatePrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(BirthDeathSampling.t:$(n)) and birthRate.t:$(n)/estimate=true'>prior on birthRate.t:$(n)</connect>
            <connect srcID='deathRatePrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(BirthDeathSampling.t:$(n)) and deathRate.t:$(n)/estimate=true'>prior on deathRate.t:$(n)</connect>
            <connect srcID='samplingRatePrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(BirthDeathSampling.t:$(n)) and samplingRate.t:$(n)/estimate=true'>prior on samplingRate.t:$(n)</connect>
            <connect srcID='rPrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(BirthDeathSampling.t:$(n)) and r.t:$(n)/estimate=true'>prior on r.t:$(n)</connect>

            <connect srcID='orig_rootScaler.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(BirthDeathSampling.t:$(n)) and orig_root.t:$(n)/estimate=true'/>
            <connect srcID='birthScaler.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(BirthDeathSampling.t:$(n)) and birthRate.t:$(n)/estimate=true'/>
            <connect srcID='deathScaler.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(BirthDeathSampling.t:$(n)) and deathRate.t:$(n)/estimate=true'/>
            <connect srcID='samplingScaler.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(BirthDeathSampling.t:$(n)) and samplingRate.t:$(n)/estimate=true'/>
            <connect srcID='rScaler.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(BirthDeathSampling.t:$(n)) and r.t:$(n)/estimate=true'/>
            <connect srcID='rJumpOperator.t:$(n)' targetID='mcmc' inputName='operator'     if='inposterior(BirthDeathSampling.t:$(n)) and r.t:$(n)/estimate=true'/>

            <connect srcID='r.t:$(n)' targetID='TreeDimensionJump.t:$(n)' inputName='becomeNoninfectiousAfterSamplingProbability'/>
            <connect srcID='r.t:$(n)' targetID='WilsonBalding.t:$(n)' inputName='becomeNoninfectiousAfterSamplingProbability'/>

            <connect srcID='BirthDeathSampling.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(BirthDeathSampling.t:$(n))'/>
            <plate var='p' range='orig_root,birthRate,deathRate,samplingRate,r'>
                <connect srcID='$(p).t:$(n)' targetID='state' inputName='stateNode' if='inposterior(BirthDeathSampling.t:$(n)) and $(p).t:$(n)/estimate=true'/>
                <connect srcID='$(p).t:$(n)' targetID='tracelog' inputName='log' if='inposterior(BirthDeathSampling.t:$(n)) and $(p).t:$(n)/estimate=true'/>
            </plate>
            <connect srcID='BirthDeathSampling.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(BirthDeathSampling.t:$(n))'/>

            <connect srcID='SACount.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n))'/>
        </subtemplate>
    </mergewith>

</beast>