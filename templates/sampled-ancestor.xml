<beast version='2.0'
       namespace='beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree:coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'>
    
    <mergewith point='aux-partitions-panels'>

        <alignmentProvider id="Add Sampled Ancestor Analysis" spec='BeautiAlignmentProvider' template='@SampledAncestorBirthDeathSamplingModel'/>

        <subtemplate id='SampledAncestorBirthDeathSamplingModel' spec='BeautiSubTemplate' class='beast.evolution.likelihood.TreeLikelihood' mainid='SAtreeLikelihood.$(n)'
                     suppressInputs='beast.evolution.speciation.SABDSamplingThroughTimeModel.birthRate,
    	beast.evolution.speciation.SABDSamplingThroughTimeModel.deathRate,
	beast.evolution.speciation.SABDSamplingThroughTimeModel.samplingRate,
	beast.evolution.speciation.SABDSamplingThroughTimeModel.becomeNoninfectiousAfterSamplingProbability,
	beast.evolution.speciation.SABDSamplingThroughTimeModel.tree,
	beast.evolution.speciation.SABDSamplingThroughTimeModel.treeIntervals,
	beast.math.distributions.MarkovChainDistribution.parameter
	'>

        <![CDATA[
            <!-- site model                                                              -->
            <plugin spec='SiteModel' id="SiteModel.s:$(n)" gammaCategoryCount='0'>
                <!--substModel will be automatically detected /-->
                <proportionInvariant spec='parameter.RealParameter' id='proportionInvariant.s:$(n)' value='0.0' lower='0' upper='1' estimate='false'/>
                <mutationRate        spec='parameter.RealParameter' id='mutationRate.s:$(n)' value='1.0'        estimate='false'/>
                <shape               spec='parameter.RealParameter' id='gammaShape.s:$(n)' value='1.0'         estimate='false'/>
            </plugin>

            <plugin spec='TreeLikelihood' id="SAtreeLikelihood.$(n)">
                <data idref="data"/>
                <tree idref="Tree.t:$(n)"/>
                <siteModel idref="SiteModel.s:$(n)"/>
                <branchRateModel spec='StrictClockModel' id='StrictClock.c:$(n)'>
                    <clock.rate id='clockRate.c:$(n)' spec='parameter.RealParameter' value='1.0' estimate='false'/>
                </branchRateModel>
            </plugin>

	        <prior id='ClockPrior.c:$(n)' x='@clockRate.c:$(n)'><distr spec="beast.math.distributions.Uniform" upper='Infinity'/></prior>
	        <prior id='MutationRatePrior.s:$(n)' x='@mutationRate.s:$(n)'><distr spec="OneOnX"/></prior>

            <!-- tree and its properties -->
            <taxonset id='SATaxonSet.$(n)' spec='beast.evolution.alignment.TaxonSet' alignment='@$(n)' />
            <plugin spec='beast.evolution.tree.ZeroBranchSATree' nodetype="beast.evolution.tree.ZeroBranchSANode" id='Tree.t:$(n)' taxonset='@SATaxonSet.$(n)'/>

            <!--plugin spec='beast.evolution.tree.ZeroBranchSARandomTree' id='SARandomTree.t:$(n)' estimate='false' trait='@datetrait.$(n)' initial='@Tree.t:$(n)'-->
            <plugin spec='beast.evolution.tree.ZeroBranchSARandomTree' id='SARandomTree.t:$(n)' nodetype="beast.evolution.tree.ZeroBranchSANode" estimate='false' initial='@Tree.t:$(n)'>
                <taxa spec='Alignment' idref='data'/>
                <populationModel id='ConstantPopulation0.t:$(n)' spec='ConstantPopulation'>
            		<popSize id='randomPopSize.t:$(n)' spec='parameter.RealParameter' value='1'/>
	            </populationModel>
            </plugin>

            <!-- default Sampled ancestor birth-death-sampling tree prior-->
            <BirthDeathSamplingModel spec="SABDSamplingThroughTimeModel" id="SABirthDeathSampling.t:$(n)" tree="@Tree.t:$(n)">
		        <parameter name="origin" id="SAorigin.t:$(n)" value ="1.0" lower="0." upper="1000."/>
                <parameter name="birthRate" id="SAbirthRate.t:$(n)" value ="1.5" lower ="0." upper="100"/>
                <parameter name="deathRate" id="SAdeathRate.t:$(n)" value ="0.2" lower="0." upper="10"/>
                <parameter name="samplingRate" id="SAsamplingRate.t:$(n)" value="0.5" lower="0." upper="10"/>
                <parameter name="becomeNoninfectiousAfterSamplingProbability" id="SAr.t:$(n)" value="0.5" lower="0." upper="1."/>
	        </BirthDeathSamplingModel>

	        <distribution  id='SAoriginPrior.t:$(n)' x="@SAorigin.t:$(n)" spec='beast.math.distributions.Prior'>
		        <distr spec='beast.math.distributions.Uniform' lower="0." upper="1000."/>
            </distribution>
            <distribution id='SAbirthRatePrior.t:$(n)' spec="beast.math.distributions.Prior" x="@SAbirthRate.t:$(n)">
                <distr spec='beast.math.distributions.LogNormalDistributionModel' M="0." S="1." offset="0.0" meanInRealSpace="false"/>
            </distribution>
            <distribution id='SAdeathRatePrior.t:$(n)' spec="beast.math.distributions.Prior" x="@SAdeathRate.t:$(n)">
                <distr spec='beast.math.distributions.LogNormalDistributionModel' M="0." S="0.5" offset="0.0" meanInRealSpace="false"/>
            </distribution>
            <distribution id='SAsamplingRatePrior.t:$(n)' spec="beast.math.distributions.Prior" x="@SAsamplingRate.t:$(n)">
                <distr spec='beast.math.distributions.LogNormalDistributionModel' M="0." S="0.5" offset="0.0" meanInRealSpace="false"/>
            </distribution>
            <distribution id='SArPrior.t:$(n)' spec="beast.math.distributions.Prior" x="@SAr.t:$(n)">
                <distr spec='beast.math.distributions.DegenerateBeta' alpha = "1.0" beta = "1.0"/>
            </distribution>

            <prior id='GammaShapePrior.s:$(n)' x='@gammaShape.s:$(n)'><distr spec="beast.math.distributions.Exponential" mean='1'/></prior>
            <prior id='PropInvariantPrior.t:$(n)' x='@proportionInvariant.s:$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' upper='1'/></prior>


            <plugin id='SATreeHeight.t:$(n)' spec='beast.evolution.tree.TreeHeightLogger' tree='@Tree.t:$(n)'/>

            <plugin id='SASACount.t:$(n)' spec='beast.evolution.tree.SALogger' tree='@Tree.t:$(n)'/>

            <logger id='treelog.t:$(n)' spec='beast.core.Logger' logEvery="1000" fileName="$(tree).trees" mode='tree'>
	            <log id='TreeWithMetaDataLogger.t:$(n)' spec='beast.evolution.tree.TreeWithMetaDataLogger' tree='@Tree.t:$(n)'>
	            </log>
            </logger>

            <operator id='SATreeDimensionJump.t:$(n)' spec='TreeDimensionJump' weight="10" tree="@Tree.t:$(n)"/>
            <operator id='SAWilsonBalding.t:$(n)' spec='WilsonBaldingForFakeSampledAncestorTrees' weight="3" tree="@Tree.t:$(n)"/>
            <operator id='SAwideExchange.t:$(n)' spec='ExchangeForFakeSampledAncestorTrees' isNarrow="false" weight="3" tree="@Tree.t:$(n)"/>
            <operator id='SAnarrowExchange.t:$(n)' spec='ExchangeForFakeSampledAncestorTrees' weight="15" tree="@Tree.t:$(n)"/>
            <operator id='SAtreeUniform.t:$(n)' spec='UniformForFakeSATrees' weight="30" tree="@Tree.t:$(n)"/>
            <operator id='SArootScaler.t:$(n)' spec='ScaleOperatorForFakeSATrees' scaleFactor=".95" weight="3" tree="@Tree.t:$(n)" rootOnly='true'/>
            <operator id='SAtreeScaler.t:$(n)' spec='ScaleOperatorForFakeSATrees' scaleFactor=".95" weight="3" tree="@Tree.t:$(n)"/>

            <operator id='proportionInvariantScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@proportionInvariant.s:$(n)"/>
            <operator id='mutationRateScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@mutationRate.s:$(n)"/>
            <operator id='gammaShapeScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@gammaShape.s:$(n)"/>

            <operator id='SAoriginScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="3" parameter="@SAorigin.t:$(n)"/>
            <operator id='SAbirthScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@SAbirthRate.t:$(n)"/>
            <operator id='SAdeathScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@SAdeathRate.t:$(n)"/>
	        <operator id='SAsamplingScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@SAsamplingRate.t:$(n)"/>
            <operator id='SArScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".9" weight="1" parameter="@SAr.t:$(n)"/>
            <operator id='SArJumpOperator.t:$(n)' spec='JumpToPoint' weight = "1" becomeNoninfectiousAfterSamplingProbability="@SAr.t:$(n)" tree = "@Tree.t:$(n)"/>

			<operator id='StrictClockRateScaler.c:$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter='@clockRate.c:$(n)'/>

]]>
        <connect srcID='SAtreeLikelihood.$(n)'            targetID='likelihood' inputName='distribution' if="isInitializing"/>
        <connect srcID='SABirthDeathSampling.t:$(n)'      targetID='prior'      inputName='distribution' if="isInitializing"/>
        <connect method="beast.app.beauti.SiteModelInputEditor.customConnector"/>

        <connect srcID='treelog.t:$(n)'                 targetID='mcmc' inputName='logger' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
        <connect srcID='SARandomTree.t:$(n)'                targetID='mcmc' inputName='init'   if='inposterior(Tree.t:$(n))'/>

        <connect srcID='ClockPrior.c:$(n)'                targetID='prior' inputName='distribution' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
        <!-- when FixMeanMutationRatesOperator, the prior is uniform due to the operator -->
        <connect srcID='MutationRatePrior.s:$(n)'         targetID='prior' inputName='distribution' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>

        <connect srcID='Tree.t:$(n)'                      targetID='state' inputName='stateNode' if='inposterior(Tree.t:$(n))'/>
        <connect srcID='proportionInvariant.s:$(n)'       targetID='state' inputName='stateNode' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
        <connect srcID='mutationRate.s:$(n)'              targetID='state' inputName='stateNode' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
        <connect srcID='gammaShape.s:$(n)'                targetID='state' inputName='stateNode' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
        <connect srcID='clockRate.c:$(n)'                 targetID='state' inputName='stateNode' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>

        <connect srcID='proportionInvariantScaler.s:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Scales proportion of invariant sites parameter of partition $(n)</connect>
        <connect srcID='mutationRateScaler.s:$(n)'        targetID='mcmc' inputName='operator' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'>Scales mutation rate of partition s:$(n)</connect>
        <connect srcID='gammaShapeScaler.s:$(n)'          targetID='mcmc' inputName='operator' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Scales gamma shape parameter of partition s:$(n)</connect>
        <connect srcID='StrictClockRateScaler.c:$(n)'     targetID='mcmc' inputName='operator' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'>Scale clock rate of partition c:$(n)</connect>

        <connect srcID='SAtreeLikelihood.$(n)'              targetID='tracelog' inputName='log' if='inlikelihood(SAtreeLikelihood.$(n))'/>
        <connect srcID='SATreeHeight.t:$(n)'                targetID='tracelog' inputName='log' if='inlikelihood(SAtreeLikelihood.$(n))'/>
        <connect srcID='proportionInvariant.s:$(n)'       targetID='tracelog' inputName='log' if='inposterior(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
        <connect srcID='mutationRate.s:$(n)'              targetID='tracelog' inputName='log' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
        <connect srcID='gammaShape.s:$(n)'                targetID='tracelog' inputName='log' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
        <connect srcID='clockRate.c:$(n)'                 targetID='tracelog' inputName='log' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
        <connect srcID='BirthDeathSampling.t:$(n)'        targetID='tracelog' inputName='log' if='inposterior(BirthDeathSampling.t:$(n))'/>

        <connect srcID='GammaShapePrior.s:$(n)'           targetID='prior' inputName='distribution' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
        <connect srcID='PropInvariantPrior.s:$(n)'        targetID='prior' inputName='distribution' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>

        </subtemplate>
    </mergewith>



    <!-- tree priors -->
    <mergewith point='treePriorTemplates'>

    <subtemplate id='SampledAncestorBirthDeathSamplingPrior' class='beast.evolution.speciation.SABDSamplingThroughTimeModel' mainid='SABirthDeathSampling.t:$(n)'
>
            <![CDATA[
<!-- Sampled Ancestor Birth Death Sampling model-->
    <BirthDeathSamplingModel spec="SABDSamplingThroughTimeModel" id="SABirthDeathSampling.t:$(n)" tree="@Tree.t:$(n)">
        <parameter name="origin" id="SAorigin.t:$(n)" value ="1.0" lower="0." upper="1000."/>
        <parameter name="birthRate" id="SAbirthRate.t:$(n)" value ="1.5" lower ="0." upper="100"/>
        <parameter name="deathRate" id="SAdeathRate.t:$(n)" value ="0.2" lower="0." upper="10"/>
        <parameter name="samplingRate" id="SAsamplingRate.t:$(n)" value="0.5" lower="0." upper="10"/>
        <parameter name="becomeNoninfectiousAfterSamplingProbability" id="SAr.t:$(n)" value="0.5" lower="0." upper="1."/>
    </BirthDeathSamplingModel>

    <distribution  id='SAoriginPrior.t:$(n)' x="@SAorigin.t:$(n)" spec='beast.math.distributions.Prior'>
        <distr spec='beast.math.distributions.Uniform' lower="0." upper="1000."/>
    </distribution>
    <distribution id='SAbirthRatePrior.t:$(n)' spec="beast.math.distributions.Prior" x="@SAbirthRate.t:$(n)">
        <distr spec='beast.math.distributions.LogNormalDistributionModel' M="0." S="1." offset="0.0" meanInRealSpace="false"/>
    </distribution>
    <distribution id='SAdeathRatePrior.t:$(n)' spec="beast.math.distributions.Prior" x="@SAdeathRate.t:$(n)">
        <distr spec='beast.math.distributions.LogNormalDistributionModel' M="0." S="0.5" offset="0.0" meanInRealSpace="false"/>
    </distribution>
    <distribution id='SAsamplingRatePrior.t:$(n)' spec="beast.math.distributions.Prior" x="@SAsamplingRate.t:$(n)">
        <distr spec='beast.math.distributions.LogNormalDistributionModel' M="0." S="0.5" offset="0.0" meanInRealSpace="false"/>
    </distribution>
    <distribution id='SArPrior.t:$(n)' spec="beast.math.distributions.Prior" x="@SAr.t:$(n)">
        <distr spec='beast.math.distributions.DegenerateBeta' alpha = "1.0" beta = "1.0"/>
    </distribution>

    <operator id='SATreeDimensionJump.t:$(n)' spec='TreeDimensionJump' weight="10" tree="@Tree.t:$(n)"/>
    <operator id='SAWilsonBalding.t:$(n)' spec='WilsonBaldingForFakeSampledAncestorTrees' weight="3" tree="@Tree.t:$(n)"/>
    <operator id='SAwideExchange.t:$(n)' spec='ExchangeForFakeSampledAncestorTrees' isNarrow="false" weight="3" tree="@Tree.t:$(n)"/>
    <operator id='SAnarrowExchange.t:$(n)' spec='ExchangeForFakeSampledAncestorTrees' weight="15" tree="@Tree.t:$(n)"/>
    <operator id='SAtreeUniform.t:$(n)' spec='UniformForFakeSATrees' weight="30" tree="@Tree.t:$(n)"/>
    <operator id='SArootScaler.t:$(n)' spec='ScaleOperatorForFakeSATrees' scaleFactor=".95" weight="3" tree="@Tree.t:$(n)" rootOnly='true'/>
    <operator id='SAtreeScaler.t:$(n)' spec='ScaleOperatorForFakeSATrees' scaleFactor=".95" weight="3" tree="@Tree.t:$(n)"/>

	<operator id='SAoriginScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="3" parameter="@SAorigin.t:$(n)"/>
    <operator id='SAbirthScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@SAbirthRate.t:$(n)"/>
    <operator id='SAdeathScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@SAdeathRate.t:$(n)"/>
	<operator id='SAsamplingScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@SAsamplingRate.t:$(n)"/>
    <operator id='SArScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".9" weight="1" parameter="@SAr.t:$(n)"/>
    <operator id='SArJumpOperator.t:$(n)' spec='JumpToPoint' weight = "1" becomeNoninfectiousAfterSamplingProbability="@SAr.t:$(n)" tree = "@Tree.t:$(n)"/>

    <plugin id='SACount.t:$(n)' spec='beast.evolution.tree.SALogger' tree='@Tree.t:$(n)'/>

]]>
            <connect srcID='SABirthDeathSampling.t:$(n)' targetID='prior'   inputName='distribution' if='inposterior(SABirthDeathSampling.t:$(n)) and inlikelihood(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>

		    <connect srcID='SAtreeScaler.t:$(n)'         targetID='mcmc' inputName='operator' if='inposterior(SABirthDeathSampling.t:$(n)) and Tree.t:$(n)/estimate=true'>Scales all none-sampled internal nodes for tree t:$(n)</connect>
		    <connect srcID='SArootScaler.t:$(n)'         targetID='mcmc' inputName='operator' if='inposterior(SABirthDeathSampling.t:$(n)) and Tree.t:$(n)/estimate=true'>Scales root node for tree t:$(n)</connect>
		    <connect srcID='SAtreeUniform.t:$(n)'        targetID='mcmc' inputName='operator' if='inposterior(SABirthDeathSampling.t:$(n)) and Tree.t:$(n)/estimate=true'>Draws new internal node heights uniformally for tree t:$(n)</connect>
		    <connect srcID='SAnarrowExchange.t:$(n)'     targetID='mcmc' inputName='operator' if='inposterior(SABirthDeathSampling.t:$(n)) and Tree.t:$(n)/estimate=true'>Narrow exchange performs local rearrangement of tree t:$(n)</connect>
		    <connect srcID='SAwideExchange.t:$(n)'       targetID='mcmc' inputName='operator' if='inposterior(SABirthDeathSampling.t:$(n)) and Tree.t:$(n)/estimate=true'>Wide exchange performs global rearrangement of tree t:$(n)</connect>
		    <connect srcID='SAWilsonBalding.t:$(n)'      targetID='mcmc' inputName='operator' if='inposterior(SABirthDeathSampling.t:$(n)) and Tree.t:$(n)/estimate=true'>Performs Wilson-Balding global rearrangement of tree t:$(n)</connect>
		    <connect srcID='SATreeDimensionJump.t:$(n)'  targetID='mcmc' inputName='operator' if='inposterior(SABirthDeathSampling.t:$(n)) and Tree.t:$(n)/estimate=true'>Performs Wilson-Balding global rearrangement of tree t:$(n)</connect>

            <connect srcID='SAoriginScaler.t:$(n)'    targetID='mcmc'    inputName='operator'     if='inposterior(SABirthDeathSampling.t:$(n)) and SAorigin.t:$(n)/estimate=true'/>
            <connect srcID='SAbirthScaler.t:$(n)'        targetID='mcmc'    inputName='operator'     if='inposterior(SABirthDeathSampling.t:$(n)) and SAbirthRate.t:$(n)/estimate=true'/>
            <connect srcID='SAdeathScaler.t:$(n)'        targetID='mcmc'    inputName='operator'     if='inposterior(SABirthDeathSampling.t:$(n)) and SAdeathRate.t:$(n)/estimate=true'/>
            <connect srcID='SAsamplingScaler.t:$(n)'     targetID='mcmc'    inputName='operator'     if='inposterior(SABirthDeathSampling.t:$(n)) and SAsamplingRate.t:$(n)/estimate=true'/>
            <connect srcID='SArScaler.t:$(n)'            targetID='mcmc'    inputName='operator'     if='inposterior(SABirthDeathSampling.t:$(n)) and SAr.t:$(n)/estimate=true'/>
            <connect srcID='SArJumpOperator.t:$(n)'      targetID='mcmc'    inputName='operator'     if='inposterior(SABirthDeathSampling.t:$(n)) and SAr.t:$(n)/estimate=true'/>

            <connect srcID='SAr.t:$(n)'                  targetID='SATreeDimensionJump.t:$(n)' inputName='becomeNoninfectiousAfterSamplingProbability'/>
            <connect srcID='SAr.t:$(n)'                  targetID='SAWilsonBalding.t:$(n)'     inputName='becomeNoninfectiousAfterSamplingProbability'/>

            <connect srcID='SABirthDeathSampling.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(SABirthDeathSampling.t:$(n))'/>
            <connect srcID='SACount.t:$(n)'              targetID='tracelog' inputName='log' if='inposterior(SABirthDeathSampling.t:$(n)) and inposterior(Tree.t:$(n))'/>

            <plate var='p' range='SAorigin,SAbirthRate,SAdeathRate,SAsamplingRate,SAr'>
	            <connect srcID='$(p)Prior.t:$(n)'      targetID='prior'    inputName='distribution' if='inposterior(SABirthDeathSampling.t:$(n)) and $(p).t:$(n)/estimate=true'>prior on sampled ancestor parameter $(p).t:($(n)</connect>
                <connect srcID='$(p).t:$(n)'           targetID='state'    inputName='stateNode' if='inposterior(SABirthDeathSampling.t:$(n)) and $(p).t:$(n)/estimate=true'/>
                <connect srcID='$(p).t:$(n)'           targetID='tracelog' inputName='log' if='inposterior(SABirthDeathSampling.t:$(n)) and $(p).t:$(n)/estimate=true'/>
            </plate>
            <connect srcID='SABirthDeathSampling.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(SABirthDeathSampling.t:$(n))'/>

        </subtemplate>
    </mergewith>
</beast>

